//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MusicaLogMDL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MusicaLogEntities : DbContext
    {
        public MusicaLogEntities()
            : base("name=MusicaLogEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Album> Album { get; set; }
    
        public virtual int CreateAlbum(string albumTitle, string artistName, string type, Nullable<int> stock)
        {
            var albumTitleParameter = albumTitle != null ?
                new ObjectParameter("albumTitle", albumTitle) :
                new ObjectParameter("albumTitle", typeof(string));
    
            var artistNameParameter = artistName != null ?
                new ObjectParameter("artistName", artistName) :
                new ObjectParameter("artistName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("stock", stock) :
                new ObjectParameter("stock", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateAlbum", albumTitleParameter, artistNameParameter, typeParameter, stockParameter);
        }
    
        public virtual int DeleteAlbum(Nullable<long> albumId)
        {
            var albumIdParameter = albumId.HasValue ?
                new ObjectParameter("albumId", albumId) :
                new ObjectParameter("albumId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteAlbum", albumIdParameter);
        }
    
        public virtual int UpdateAlbum(Nullable<long> albumId, string albumTitle, string artistName, string type, Nullable<int> stock)
        {
            var albumIdParameter = albumId.HasValue ?
                new ObjectParameter("albumId", albumId) :
                new ObjectParameter("albumId", typeof(long));
    
            var albumTitleParameter = albumTitle != null ?
                new ObjectParameter("albumTitle", albumTitle) :
                new ObjectParameter("albumTitle", typeof(string));
    
            var artistNameParameter = artistName != null ?
                new ObjectParameter("artistName", artistName) :
                new ObjectParameter("artistName", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var stockParameter = stock.HasValue ?
                new ObjectParameter("stock", stock) :
                new ObjectParameter("stock", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateAlbum", albumIdParameter, albumTitleParameter, artistNameParameter, typeParameter, stockParameter);
        }
    
        public virtual ObjectResult<Album> ReturnAlbums(string albumTitle, string artistName)
        {
            var albumTitleParameter = albumTitle != null ?
                new ObjectParameter("albumTitle", albumTitle) :
                new ObjectParameter("albumTitle", typeof(string));
    
            var artistNameParameter = artistName != null ?
                new ObjectParameter("artistName", artistName) :
                new ObjectParameter("artistName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Album>("ReturnAlbums", albumTitleParameter, artistNameParameter);
        }
    
        public virtual ObjectResult<Album> ReturnAlbums(string albumTitle, string artistName, MergeOption mergeOption)
        {
            var albumTitleParameter = albumTitle != null ?
                new ObjectParameter("albumTitle", albumTitle) :
                new ObjectParameter("albumTitle", typeof(string));
    
            var artistNameParameter = artistName != null ?
                new ObjectParameter("artistName", artistName) :
                new ObjectParameter("artistName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Album>("ReturnAlbums", mergeOption, albumTitleParameter, artistNameParameter);
        }
    }
}
