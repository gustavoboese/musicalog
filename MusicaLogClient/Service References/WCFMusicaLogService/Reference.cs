//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MusicaLogClient.WCFMusicaLogService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFMusicaLogService.IMusicaLogService")]
    public interface IMusicaLogService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicaLogService/GetAlbum", ReplyAction="http://tempuri.org/IMusicaLogService/GetAlbumResponse")]
        MusicaLogMDL.Album GetAlbum(long Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicaLogService/GetAlbum", ReplyAction="http://tempuri.org/IMusicaLogService/GetAlbumResponse")]
        System.Threading.Tasks.Task<MusicaLogMDL.Album> GetAlbumAsync(long Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicaLogService/GetAlbums", ReplyAction="http://tempuri.org/IMusicaLogService/GetAlbumsResponse")]
        MusicaLogMDL.Album[] GetAlbums(string albumTitle, string artistName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicaLogService/GetAlbums", ReplyAction="http://tempuri.org/IMusicaLogService/GetAlbumsResponse")]
        System.Threading.Tasks.Task<MusicaLogMDL.Album[]> GetAlbumsAsync(string albumTitle, string artistName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicaLogService/CreateAlbum", ReplyAction="http://tempuri.org/IMusicaLogService/CreateAlbumResponse")]
        void CreateAlbum(MusicaLogMDL.Album newAlbum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicaLogService/CreateAlbum", ReplyAction="http://tempuri.org/IMusicaLogService/CreateAlbumResponse")]
        System.Threading.Tasks.Task CreateAlbumAsync(MusicaLogMDL.Album newAlbum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicaLogService/UpdateAlbum", ReplyAction="http://tempuri.org/IMusicaLogService/UpdateAlbumResponse")]
        void UpdateAlbum([System.ServiceModel.MessageParameterAttribute(Name="updateAlbum")] MusicaLogMDL.Album updateAlbum1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicaLogService/UpdateAlbum", ReplyAction="http://tempuri.org/IMusicaLogService/UpdateAlbumResponse")]
        System.Threading.Tasks.Task UpdateAlbumAsync(MusicaLogMDL.Album updateAlbum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicaLogService/DeleteAlbum", ReplyAction="http://tempuri.org/IMusicaLogService/DeleteAlbumResponse")]
        void DeleteAlbum(long deleteAlbumId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMusicaLogService/DeleteAlbum", ReplyAction="http://tempuri.org/IMusicaLogService/DeleteAlbumResponse")]
        System.Threading.Tasks.Task DeleteAlbumAsync(long deleteAlbumId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMusicaLogServiceChannel : MusicaLogClient.WCFMusicaLogService.IMusicaLogService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MusicaLogServiceClient : System.ServiceModel.ClientBase<MusicaLogClient.WCFMusicaLogService.IMusicaLogService>, MusicaLogClient.WCFMusicaLogService.IMusicaLogService {
        
        public MusicaLogServiceClient() {
        }
        
        public MusicaLogServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MusicaLogServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MusicaLogServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MusicaLogServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MusicaLogMDL.Album GetAlbum(long Id) {
            return base.Channel.GetAlbum(Id);
        }
        
        public System.Threading.Tasks.Task<MusicaLogMDL.Album> GetAlbumAsync(long Id) {
            return base.Channel.GetAlbumAsync(Id);
        }
        
        public MusicaLogMDL.Album[] GetAlbums(string albumTitle, string artistName) {
            return base.Channel.GetAlbums(albumTitle, artistName);
        }
        
        public System.Threading.Tasks.Task<MusicaLogMDL.Album[]> GetAlbumsAsync(string albumTitle, string artistName) {
            return base.Channel.GetAlbumsAsync(albumTitle, artistName);
        }
        
        public void CreateAlbum(MusicaLogMDL.Album newAlbum) {
            base.Channel.CreateAlbum(newAlbum);
        }
        
        public System.Threading.Tasks.Task CreateAlbumAsync(MusicaLogMDL.Album newAlbum) {
            return base.Channel.CreateAlbumAsync(newAlbum);
        }
        
        public void UpdateAlbum(MusicaLogMDL.Album updateAlbum1) {
            base.Channel.UpdateAlbum(updateAlbum1);
        }
        
        public System.Threading.Tasks.Task UpdateAlbumAsync(MusicaLogMDL.Album updateAlbum) {
            return base.Channel.UpdateAlbumAsync(updateAlbum);
        }
        
        public void DeleteAlbum(long deleteAlbumId) {
            base.Channel.DeleteAlbum(deleteAlbumId);
        }
        
        public System.Threading.Tasks.Task DeleteAlbumAsync(long deleteAlbumId) {
            return base.Channel.DeleteAlbumAsync(deleteAlbumId);
        }
    }
}
